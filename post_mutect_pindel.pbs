#!/bin/bash

### Usage: qsub -v PATIENT=PatientXX,PROJ=LG3orGBM,CONV=${LG3_OUTPUT_ROOT}/${PROJECT}/exome/patient_ID_conversions.tsv /path/to/pindel_all.pbs
#PBS -N ${PATIENT}.comb
#PBS -e _PostMut_${PATIENT}.err
#PBS -o _PostMut_${PATIENT}.out
#PBS -l nodes=1:ppn=1,vmem=32gb
#PBS -m ae

# shellcheck source=scripts/utils.sh
source "${LG3_HOME}/scripts/utils.sh"

PROGRAM=${BASH_SOURCE[0]}
echo "[$(date +'%Y-%m-%d %H:%M:%S %Z')] BEGIN: $PROGRAM"
echo "Call: ${BASH_SOURCE[*]}"
echo "Script: $PROGRAM"
echo "Arguments: $*"

LG3_HOME=${LG3_HOME:?}
LG3_OUTPUT_ROOT=${LG3_OUTPUT_ROOT:-output}
LG3_INPUT_ROOT=${LG3_INPUT_ROOT:-${LG3_OUTPUT_ROOT}}
PROJECT=${PROJECT:-LG3}
CONV=${CONV:-patient_ID_conversions.tsv}
PATIENT=${PATIENT:-Patient157}
EMAIL=${EMAIL:?}
LG3_DEBUG=${LG3_DEBUG:-true}

## Requires absolute path 
LG3_HOME=$(readlink -e "$LG3_HOME")
LG3_INPUT_ROOT=$(readlink -e "$LG3_INPUT_ROOT")
LG3_OUTPUT_ROOT=$(readlink -e "$LG3_OUTPUT_ROOT")

### Debug
if [[ $LG3_DEBUG ]]; then
  echo "Settings:"
  echo "- LG3_HOME=$LG3_HOME"
  echo "- LG3_INPUT_ROOT=${LG3_INPUT_ROOT:?}"
  echo "- LG3_OUTPUT_ROOT=$LG3_OUTPUT_ROOT"
  echo "- EMAIL=${EMAIL}"
  echo "- LG3_SCRATCH_ROOT=$LG3_SCRATCH_ROOT"
  echo "- PWD=$PWD"
  echo "- USER=$USER"
  echo "- PBS_NUM_PPN=$PBS_NUM_PPN"
  echo "- PATIENT=${PATIENT:?}"
  echo "- PROJECT=${PROJECT:?}"
  echo "- CONV=${CONV:?}"
fi

assert_file_exists "${CONV}"
CONV=$(readlink -e "${CONV:?}") ## Absolute path


PROG=$(basename "$0")
OK() {
        echo "OK: line ${BASH_LINENO[0]} in $PROG"
}

echo -n "Mutation filtering & combining "
date
echo "Patient: ${PATIENT:?}"
# shellcheck disable=SC2153
echo "Project: ${PROJECT:?}"
echo "Conversion file: ${CONV:?}"
echo "----------------------------------"


### Software
RSCRIPT_BIN=/opt/R/R-latest/bin/Rscript
RSCRIPT_A=${LG3_HOME}/scripts/MutDet_filter.R
RSCRIPT_B=${LG3_HOME}/scripts/combine_snvs_pindel.R
SCRIPT_A=${LG3_HOME}/scripts/combine_snvs.sh
SCRIPT_B=${LG3_HOME}/scripts/annotate_mutations_from_bam.sh
SCRIPT_C=${LG3_HOME}/scripts/libID_to_patientID.sh
SCRIPT_D=${LG3_HOME}/scripts/mutation_overlaps.sh
SCRIPT_E=${LG3_HOME}/scripts/mutect_coverage_intersection_mutations.sh
SCRIPT_F=${LG3_HOME}/scripts/runLOH_ivan.sh

assert_file_executable "${RSCRIPT_BIN}"
assert_file_exists "${RSCRIPT_A}"
assert_file_exists "${RSCRIPT_B}"
assert_file_executable "${SCRIPT_A}"
assert_file_executable "${SCRIPT_B}"
assert_file_executable "${SCRIPT_C}"
assert_file_executable "${SCRIPT_D}"
assert_file_executable "${SCRIPT_E}"
assert_file_executable "${SCRIPT_F}"


WDIR=${LG3_OUTPUT_ROOT}/${PROJECT}/MutInDel
mkdir -p "${WDIR}" || error "Can't create destination directory ${WDIR}"
cd "${WDIR}" || error "Failed to set working directory to ${WDIR}"

echo -e "\\n************ Cat all SNV files per patient"
"${SCRIPT_A}" "${PATIENT}" "${PROJECT}" "${CONV}" || error "${SCRIPT_A} failed"
OK 

echo -e "\\n************ Annotate mutations from aligned bam files"
"${SCRIPT_B}" "${CONV}" "${PATIENT}" "${PROJECT}" || error "${SCRIPT_B} failed"
OK

echo -e "\\n************ Convert library IDs to patient IDs"
"${SCRIPT_C}" "${CONV}" "${PATIENT}" "${PATIENT}.snvs.anno.txt"  "${PATIENT}.snvs.anno.pat.txt" || error "${SCRIPT_C} failed"
OK

echo -e "\\n************ Remove SomaticIndelDetector and ourJudgment=='no' and mutations with alt in normal"
"${RSCRIPT_BIN}" "${RSCRIPT_A}" "${PATIENT}.snvs.anno.pat.txt" "${PATIENT}.snvs.anno.pat.filt.txt" || error "${RSCRIPT_A} failed"
OK 

echo -e "\\n************ Combine indels and snvs into one file"
"${RSCRIPT_BIN}" "${RSCRIPT_B}" "${PATIENT}.snvs.anno.pat.filt.txt" "${LG3_OUTPUT_ROOT}/${PROJECT}/pindel/${PATIENT}_pindel/${PATIENT}.indels.filtered.anno.txt" "${PATIENT}.snvs.indels.filtered.txt" || error "${RSCRIPT_B} failed"
OK 

echo -e "\\n************ Calculate mutation overlaps"
"${SCRIPT_D}" "${PATIENT}.snvs.indels.filtered.txt" "${PATIENT}" "${PATIENT}.snvs.indels.filtered.overlaps.txt" || error "${SCRIPT_D} failed"
OK 

echo -e "\\n************ Annotate with shared coverage"
"${SCRIPT_E}" "${PATIENT}" "${PROJECT}" "${CONV}" || error "${SCRIPT_E} failed"
OK

echo -e "\\n************ Generate MAF files & LOH plots"
"${SCRIPT_F}" "${PATIENT}" "${PROJECT}" "${CONV}" || error "${SCRIPT_F} failed"
OK

echo "[$(date +'%Y-%m-%d %H:%M:%S %Z')] END: $PROGRAM"
