#!/bin/bash
##### Version of the pipeline without Base Qual. Recal! (for BAMS already recaled!)

### Usage: qsub -N Job_Name -v BAMS=/path/to/file1.bam:/path/to/file2.bam:...,NORMAL=AXXXXXX,PATIENT=PatientXX,ILIST=/path/to/exome_kit.interval_list /path/to/Recal_pass2.pbs
### Output files
#PBS -e _Recal2_${PATIENT}.err
#PBS -o _Recal2_${PATIENT}.out
#PBS -l nodes=1:bigmem:ppn=12,vmem=200gb
#PBS -m ae

### Configuration
LG3_HOME=${LG3_HOME:-/home/jocostello/shared/LG3_Pipeline}
LG3_OUTPUT_ROOT=${LG3_OUTPUT_ROOT:-output}
EMAIL=${EMAIL:?}
PROJECT=${PROJECT:-LG3}
LG3_SCRATCH_ROOT=${LG3_SCRATCH_ROOT:-/scratch/${USER:?}/${PBS_JOBID}}
LG3_DEBUG=${LG3_DEBUG:-true}

### Debug
if [[ $LG3_DEBUG ]]; then
  echo "LG3_HOME=$LG3_HOME"
  echo "LG3_OUTPUT_ROOT=$LG3_OUTPUT_ROOT"
  echo "PROJECT=${PROJECT}"
  echo "EMAIL=${EMAIL}"
  echo "LG3_SCRATCH_ROOT=$LG3_SCRATCH_ROOT"
  echo "PWD=$PWD"
  echo "USER=$USER"
fi

### Input
echo "Input:"
echo "- PROJECT=${PROJECT:?}"
echo "- BAMS=${BAMS:?}"
echo "- PATIENT=${PATIENT:?}"
echo "- NORMAL=${NORMAL:?}"
echo "- ILIST=${ILIST:?}"

## Assert existance of input files
[[ -f "$ILIST" ]] || { echo "File not found: ${ILIST}"; exit 1; }
ILIST=$(readlink -e "${ILIST:?}") ## Absolute path

module load CBC r/3.4.2
echo -n "Checking R: "
Rscript --version || { echo "ERROR: No Rscript is available!"; exit 1; }

DATE=$(date '+%Y-%m-%d %H:%M:%S')
NODES=$(tr '\n' ' ' < "$PBS_NODEFILE")
echo "Started $PROG on $DATE"
echo "Using node(s): $NODES"

## Assert existance of software
SCRIPT_A=${LG3_HOME}/scripts/Recal_pass2.sh
[[ -x "$SCRIPT_A" ]] || { echo "File not found or not an executable: ${SCRIPT_A}"; exit 1; }
SCRIPT_B=${LG3_HOME}/scripts/Germline.sh
[[ -x "$SCRIPT_B" ]] || { echo "File not found or not an executable: ${SCRIPT_B}"; exit 1; }

DESTDIR=${LG3_OUTPUT_ROOT}/${PROJECT}/exomes_recal/${PATIENT}
mkdir -p "${DESTDIR}" || { echo "Can't create destination directory ${DESTDIR}"; exit 1; }

DESTDIR2=${LG3_OUTPUT_ROOT}/${PROJECT}/exomes_recal/${PATIENT}/germline
mkdir -p "${DESTDIR2}" || { echo "Can't create destination directory ${DESTDIR2}"; exit 1; }

WDIR=${LG3_SCRATCH_ROOT}/${PATIENT}
mkdir -p "${WDIR}" || { echo "Can't create destination directory ${WDIR}"; exit 1; }
cd "${WDIR}" || { echo "ERROR: Failed to set working directory to ${WDIR}"; exit 1; }

"${SCRIPT_A}" "$BAMS" "$PATIENT" "$ILIST" || { echo "ERROR: ${SCRIPT_A} failed!"; exit 1; }
echo "${SCRIPT_A} done!"

cd "${LG3_SCRATCH_ROOT}" || { echo "ERROR: Failed to set working directory to ${LG3_SCRATCH_ROOT}"; exit 1; }

cp -p "${LG3_SCRATCH_ROOT}/${PATIENT}"/* "${DESTDIR}" || { echo "ERROR: cp from scratch failed!" ; exit 1 ; }
echo "Cleaning ${LG3_SCRATCH_ROOT} ..."
rm -rf "${LG3_SCRATCH_ROOT:?}/${PATIENT}"

echo "Making symlinks ..."
cd "${DESTDIR}" || { echo "ERROR: failed to cd to ${DESTDIR}"; exit 1; }
mk_links() {
  while read -r F
  do
    L=${F/rmDups/rmDups.recal}
    echo "ln -sf $F $L"
    ln -sf "$F" "$L"
  done
}
grep -v recal ./*.bwa.realigned.rmDups.* | mk_links


cd "${DESTDIR2}" || { echo "ERROR: Failed to set working directory to ${DESTDIR2}"; exit 1; }

{ time "${SCRIPT_B}" \
		"${DESTDIR}/${NORMAL}.bwa.realigned.rmDups.bam" \
      "${PATIENT}" "$ILIST"; } 2>&1 || { echo "ERROR: ${SCRIPT_B} failed"; exit 1; }

echo "End of script!"
echo "[$(date +'%Y-%m-%d %H:%M:%S %Z')] END: $PROGRAM"
