#! /usr/bin/env bash
source "${LG3_HOME:?}/scripts/utils.sh"
source_lg3_conf
### Selectively Delete LG3 Pipeline Output
###
### Usage:
###  lg3 cleanup [options] (--hot)
###
### Options:
###  --project=<PROJECT>   Name of project (default: LG3)
###  --patient=<PATIENT>   Name of patient
###  --samples="<SAMPLES>" Space-separated set of samples
###
###  --trim                Remove trimmed FASTQ files
###  --bwa                 aligned BAM files
###  --recal               recalibrated BAM files
###  --recal2              recalibrated Pass 2 BAM files 
###  --mut                 MutDet files
###  --mut2                Mutect2 files
###  --pindel              Pindel files
###  --comb                combo output
###  --maf                 MAF files
###  --qc                  exome QC plots
###  --pscn                PSCN files
###  --all                 everything
###
###  --hot                 Delete the files (otherwise only a dry run)
###
### Examples:
###  lg3 cleanup --patient=Patient157t10 --samples="Z00599t10 Z00600t10 Z00601t10"
###  lg3 cleanup --patient=Patient157t10 --recal --hot
###
#PROGRAM=${BASH_SOURCE[0]}
#PROG=$(basename "$PROGRAM")
HOT=false

TRIM=false
ALIGN=false
RECAL=false
RECAL2=false
MUT=false
MUT2=false
PINDEL=false
COMB=false
MAF=false
QC=false
PSCN=false
ALL=false

echo "CONV=${CONV:?}"
assert_file_exists "${CONV}"
CONV=$(readlink -e "$CONV")

PATIENT=${PATIENT:-Patient157t10}

while [ -n "$1" ]; do
case $1 in
    --project=*) PROJECT=${1#*=};shift 1;;
    --patient=*) PATIENT=${1#*=};shift 1;;
    --samples=*) SAMPLES="${1#*=}";shift 1;;
    --hot) HOT=true;shift 1;;
    --trim) TRIM=true;shift 1;;
    --bwa) ALIGN=true;shift 1;;
    --recal) RECAL=true;shift 1;;
    --recal2) RECAL2=true;shift 1;;
    --mut) MUT=true;shift 1;;
    --mut2) MUT2=true;shift 1;;
    --pindel) PINDEL=true;shift 1;;
    --comb) COMB=true;shift 1;;
    --maf) MAF=true;shift 1;;
    --qc) QC=true;shift 1;;
    --pscn) PSCN=true;shift 1;;
    --all) ALL=true;shift 1;;
    -*) echo "error: no such option $1";exit 1;;
    *)  break;;
esac
done
if $ALL ; then
    TRIM=true
    ALIGN=true
    RECAL=true
    #RECAL2=true
    MUT=true
    PINDEL=true
    COMB=true
    MAF=true
fi

SAMPLES=${SAMPLES:-$(grep -w "${PATIENT}" "${CONV}" | cut -f1 | tr '\n' ' ')}
echo "Project = ${PROJECT}"
echo "Patient = ${PATIENT:?}"
echo "Samples = ${SAMPLES:?}"

[[ "${PATIENT}" == *[_]* ]] && { echo "ERROR: 'PATIENT' must not contain underscores: ${PATIENT}"; exit 1; }

LG3_OUTPUT_ROOT=${LG3_OUTPUT_ROOT:-output}
TRIMDATA=${LG3_OUTPUT_ROOT}/${PROJECT}/trim
ALIGNDATA=${LG3_OUTPUT_ROOT}/${PROJECT}/exomes
RECALDATA=${LG3_OUTPUT_ROOT}/${PROJECT}/exomes_recal
MUTDATA=${LG3_OUTPUT_ROOT}/${PROJECT}/mutations
PINDELDATA=${LG3_OUTPUT_ROOT}/${PROJECT}/pindel
COMBDATA=${LG3_OUTPUT_ROOT}/${PROJECT}/MutInDel
MAFDATA=${LG3_OUTPUT_ROOT}/${PROJECT}/MAF
QCDATA=${LG3_OUTPUT_ROOT}/${PROJECT}/exome_QC_plots
SEQDATA=${LG3_OUTPUT_ROOT}/${PROJECT}/sequenza
PSCBSDATA=${LG3_OUTPUT_ROOT}/${PROJECT}/PSCBS
PSCNDATA=${LG3_OUTPUT_ROOT}/${PROJECT}/PSCN

if ! ${HOT} ; then
    echo "WARNING: Dry run! Use --hot to actually delete data"    
fi

if ${TRIM} ; then
    echo "========== Removing trimmed data ..."
    for SAMPLE in ${SAMPLES:?}
    do
        echo -e "\\t${SAMPLE}"
        D="${TRIMDATA}/${SAMPLE}-trim"
        du -h "${D}" || { echo "STOP"; exit 1; }
        echo -e "\\trm -rf ${D}"
        ${HOT} && rm -rf "${D}" 
    done
fi

if ${ALIGN} ; then
   echo "========== Removing bwa data ..."
   for SAMPLE in ${SAMPLES:?}
   do
      echo -e "\\t${SAMPLE}"
      D="${ALIGNDATA}/${SAMPLE}"
      du -h "${D}" || { echo "STOP"; exit 1; }
      echo -e "\\trm -rf ${D}"
      ${HOT} && rm -rf "${D}" 
   done
fi

if ${RECAL} ; then
    echo "========== Removing recal data for ${PATIENT:?} ..."
    D="${RECALDATA}/${PATIENT}"
    du -h "${D}" || { echo "STOP"; exit 1; }
    echo -e "\\trm -rf ${D}"
    ${HOT} && rm -rf "${D}"
fi

if ${RECAL2} ; then
    echo "========== Removing recal before.merge data for ${PATIENT:?} ..."
    D="${RECALDATA}/${PATIENT}.before.merge"
    du -h "${D}" || { echo "STOP"; exit 1; }
    echo -e "\\trm -rf ${D}"
    ${HOT} && rm -rf "${D}"
fi

if ${MUT} ; then
    echo "========== Removing mutect data for ${PATIENT:?} ..."
    D="${MUTDATA}/${PATIENT}_mutect"
    du -h "${D}" || { echo "STOP"; exit 1; }
    echo -e "\\trm -rf ${D}"
    ${HOT} && rm -rf "${D}"
fi

if ${MUT2} ; then
    echo "========== Removing Mutect2 data for ${PATIENT:?} ..."
    D="${MUTDATA}/${PATIENT}_mutect2"
    du -h "${D}" || { echo "STOP"; exit 1; }
    echo -e "\\trm -rf ${D}"
    ${HOT} && rm -rf "${D}"
fi

if ${PINDEL} ; then
    echo "========== Removing pindel data for ${PATIENT:?} ..."
    D="${PINDELDATA}/${PATIENT}_pindel"
    du -h "${D}" || { echo "STOP"; exit 1; }
    echo -e "\\trm -rf ${D}"
    ${HOT} && rm -rf "${D}"
    echo -e "\\trm -f ${PINDELDATA}/${PATIENT}.pindel.cfg"
    ${HOT} && rm -rf "${D}"
fi

if ${COMB} ; then
    echo "========== Removing combined data for ${PATIENT:?} ..."
    echo -e "\\trm -f ${COMBDATA}/${PATIENT}.[sR]*"
    du -hc "${COMBDATA}/${PATIENT}."[sR]*
    ${HOT} && rm -f "${COMBDATA}/${PATIENT}."[sR]*
fi

if ${MAF} ; then
    echo "========== Removing MAF data for ${PATIENT:?} ..."

    D="${MAFDATA}/${PATIENT}_MAF"
    du -h "${D}" || { echo "STOP"; exit 1; }
    echo -e "\\trm -rf ${D}"
    ${HOT} && rm -rf "${D}"

    D="${MAFDATA}/${PATIENT}_plots"
    du -h "${D}" || { echo "STOP"; exit 1; }
    echo -e "\\trm -rf ${D}"
    ${HOT} && rm -rf "${D}"
fi

if ${QC} ; then
    echo "========== Removing QC data for ${PATIENT:?} ..."

    D="${QCDATA}/${PATIENT}"
    du -h "${D}" || { echo "STOP"; exit 1; }
    echo -e "\\trm -rf ${D}"
    ${HOT} && rm -rf "${D}"
fi

if ${PSCN} ; then
    echo "========== Removing PSCN data for ${PATIENT:?} ..."

    D="${SEQDATA}/${PATIENT}"
    du -h "${D}" || { echo "STOP"; exit 1; }
    echo -e "\\trm -rf ${D}"
    ${HOT} && rm -rf "${D}"

    D="${PSCBSDATA}/${PATIENT}"
    du -h "${D}" || { echo "STOP"; exit 1; }
    echo -e "\\trm -rf ${D}"
    ${HOT} && rm -rf "${D}"

    D="${PSCNDATA}/${PATIENT}"
    du -h "${D}" || { echo "STOP"; exit 1; }
    echo -e "\\trm -rf ${D}"
    ${HOT} && rm -rf "${D}"
fi
echo "Finished!"
